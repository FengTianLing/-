1.如何获取一个数据的数据类型
使用 typeof 关键字,typeof的返回值是String类型


2. in关键字
for循环使用;
判断属性是否存在对象中;语法 属性名 in 对象
in关键字操作数组的时候是判断索引是否存在


3.
GMT:格林尼治时间
UTC:世界协调时

4.对象的动态特性
在对象在创建出来之后,给对象添加新的属性或者方法


5.delete关键字
用来删除对象属性,还有未使用var声明的变量;语法  delete obj.name
不能删除var 声明的变量

6 如果属性没有var 关键字,会把变量添加给window对象



7面向对象:
继承:1混入式继承 2原型继承
经典继承 Object.create(obj)

在模型中,如果使用new关键字来创建对象,不管return返回什么,都是返回这个对象
模型中如过有this声明的变量,没有使用new关键字来执行函数,会把变量添加到window对象上

Object.prototype.toString.call():获取对象的类型



JS高级开始

1.传统构造函数存在的问题
1.1:如果构造函数没有参数,new对象的时候可以省略()不写 var s = new stdent;

2.原型
 2.1在构造函数被解析的时候,系统会默认给构造函数创建一个神秘的对象,或者对象就是原型,原型默认是一个空对象
 2.2prototype:就是原型的变量名 构造函数.prototype 可以访问原型  注意,它是构造函数的属性,不是对象的属性
 2.3构造函数中的原型对象,所有被实例化出来的对象,共享原型对象的所有成员
 2.4对象被实例化后,构造方法的原型对象的引用,会赋值给实例化出来的对象
 2.5访问原型对象的另外一张方式 通过 __proto__属性.非标准属性,只用来调试使用,用来对象访问原型对象,而不是用构造器来访问
 2.6原型对象被创建出来的时候，里面有一个属性const....它保存着构造函数的地址
 2.7原型链:每个构造函数都有原型对象,每个对象都有构造函数,每个构造函数的原型都是一个对象,那么这个原型对象也会有构造函数
    那么这个原型的构造函数也会有原型对象。这样就形成了原型链

prototeype成员:
constructor:原型对象的属性,指向相关的构造函数
hasOwnProperty:一个方法,判断对象本身是否拥有某个属性
propertyIsEnumerable:判断属性是否属于对象;判断属性是否可以被遍历
3. valueof属性:获取当前对象的值
 3.1 对象在参与运算的时候,默认会先调用valueof方法
 3.2 如果获取到的值无法参与运算,会调用toString方法


Function  :new Function();
1.不传参数的时候,创建的是一个空的函数
2.只传一个参数的时候,这个参数是函数体字符串。
3,传两个或者两个以上的参数,最后一个为函数体,前面的都是函数体的型参

eval();可以将字符串转换成js代码
1.如果传入的是{}字面量对象,会把{}里面的代码执行,这个时候会报错,解决 在外层包裹一个()

instansof :关键字，用来判断对象的类型


缓存:
沙箱:
 1.使用沙箱不会在外界暴露任何的全局变量,又可以形成一个封闭的空间
 沙箱外部定义全局变量,自己的变量定义在沙箱内部
 2.沙箱模式一般应用在书写第三方框架,或者为第三方框架书写插件,或者书写功能独立的一些插件


 事件的三个阶段
 捕获阶段
 目标阶段
 冒泡阶段