ECMAscript js标准语法
Dom        js操在网页元素、
Bom        js操在浏览器


1.JS的书写位置
    1.1:写在head里面
    1.2:写在body里面
    1.3:写在html最后面(推荐)
    1.4:写在js文件里面,<script type="text/javascript" src="a.js"></script>


2.信息输出
    2.1:alert("123");
    2.2:confirm("确定取消吗?");
    2.3:console.log("123"); 在控制太输出
    2.4:propmt("输入信息");
    2.5:document.write("<p>123</p>");


3.js的数据类型
    number:数字 正数 负数 小数
    string:字符串 使用"" 或 ''表示
    boolean:布尔型 true false 实际开发中 0:false 1:true    "",undefined,null=false
    undefined:变量没有初始化
    function:也是一种数据类型

4.运算符号 + - / * %(取余)
    数字+数字=数字
    字符串+数字=字符串
    数字-数字字符串=数字
    数字字符串-数字字符串=数字
    数字-字符串=NaN (not a number)
    数字/数字字符串=数字
    数字/字符串=NaN

5.数据类型转换
    number转字符串:.toString()每个对象都有的方法
    字符串转数字:Number(),parseInt(),parseFloat().三个静态的构造方法
    布尔类型的转换:Boolean(); 数字和字符串转换都为true;
        undefubed,null,0转换完后为false
        !!变量  也可以转布尔类型
    隐式类型转换:当一个数字减去一个数字字符串,会隐式把数字字符串用上面的方法进行转换

6.逻辑运算符
    短路与&& 或|| 非！
比较运算符
 ==：比较两个值(内容)是否相等
 ===:比较两个值和类型是否都相等
 != :判断内容是否不相同
 !==:判断内容和类型是否不相同

 逗号运算符:通常用来集体声明变量
 例如 var a,b,c 

 三目运算
 表达式？结果1:结果2;
 当表达式为true执行结果1

7.代码调试
 1.F12打开开发者模式,先Source选项卡
 2.在行数打断点
 F10下一行代码
 F8直接执行完


8.循环
Switch_case
语法:
switch(n){
    case 1:case 2:
    执行的语句
    break;
    case 3:
    执行的语句
    break;
    default:
}
n和1会进行===判断,注意数据类型


for循环:
1.var i = 1的作用域是全局的

while循环:
while(boolean表达式){
    循环体
}

do_while循坏
do{
    循环体
}while(表达式)

for in循环:可以用来边里对象的属性
for(k in Object){
    
}

9.数组
语法: var arr1 = new Array();
var arr1 = [];
方法 arr1[0]="0"
length:是一个属性,不是方法.查看数组的长度


arguments:伪数组
1.只在函数中使用
2.是一个数组,数组中的每个元素就代表函数实参参数
3.不能更改数组的长度,可以修改数组中的元素
4.函数名.length:表示形参数的长度
5.arguments.length:表示实参的长度
6.arguments.callee:代表当前的整个函数


10.函数:一段可以重复执行的代码
    1.函数定于的位置,页面加载前会对函数进行预解析,调用的时候写的位置，可以是函数的前面,也可以是后面
    2.如果函数名相同,后面的会覆盖掉前面的
    3.参数的个数问题,如果实际参数多于形参个数,多出的参数不参与运算,不会报错,实参小于形参，要看程序是否报错
    4.js没有方法重载,会层叠掉前面的方法
    5.正常情况下，不会让形参和实参不匹配
    6.函数之间可以相互调用
    7.打印函数和打印函数名:【打印函数】是加括号的,是执行的意思;【打印函数名】是打印整个函数，不是执行
    8.参数相当于局部变量
    9.两个平级的函数中,变量不会互相影响
    10.参数传递都是值传递    

    返回值
    1.使用return关键字,可以把结果返回
    2.只有return没有值,接收的是undefined
    3.return可以终止后面的代码执行

    语法一
    function 方法名(参数列表){
        方法体
    }
    语法二:这种函数的定义方式,执行函数代码要放在函数定义的后面
    var fn = function (参数列表){
        方法体
    }
    语法三:这种函数的定义方式,执行函数代码要放在函数定义的后面;没有大括号
    var fn = new Function(方法体);

    匿名函数:就是没有名字的函数
    1.声明匿名函数,如果没有接收的变量,必须加小括号包围起来
    2.调用:直接调用;事件绑定;定时器


11.变量和作用域
    11.1:成员变量与局部变量
        成员变量:函数外部或者进入javascript之后立即定义的变量;和函数内部不带var的变量(必须先执行一次才能使用)因为函数在加载的时候,只会加载函数名,使用函数体里未使用var的变量不能直接使用,必须先执行一次才能使用，不然会报错，变量未定义
        局部变量:函数内部使用var定义的变量
    11.2隐式全局变量: 
        var a = b = c = 1;
        var a=1;b=1;c=1;
        其中,b,c就是隐式的
    11.3预解析:js解析器在加载页面的时候
        1.首先查看语法的错误性;
        2.然后【变量名】提升和【方法】的整体提升;
        3.变量提升只提升变量名;在函数内部照样适用;
        4.就进原则问题,自己有，就不用成员变量
        5变量名和方法名同名,提升只提升方法整体,忽略变量。
        6.[函数表达式]只会提升函数名,不会提升代码
    提升就是把变量和函数声明在最前面
    循环里面的变量是成员变量
    11.4 作用域
        1词法作用域:就是在代码写好的那一刻,变量的作用域就已经确定,这种就是词法作用域
            规则:1内部函数允许访问外部函数的变量
            2.整个代码结构中只有函数可以限定作用域
            3.作用域规则首先使用提升规则分析,如果当前作用规则中有名字了，就不考虑外面的名字了
        2.动态作用域:相对词法作用域


递归:调用自己本身
一定要有跳出条件，不然会进入死循环

回调函数:把函数作为参数一样进行使用
1.传递【函数名】相当于就传递了整个函数,在函数里面使用函数名+()调用
场景:ajax的异步返回就可以用到,如果使用return,接收到的会是一个undefined.
因为方法执行完了,响应还没回来,所以就取不到值,这是就可以用一个回调函数来传递回去给上层

闭包:一个具有封闭的对外不公开的包裹结构,或空间
把函数作为返回值进行返回
1.上级作用域无法访问下级作用域的变量
2解决:在函数里面在定义一个函数，把这个函数返回



对象:JS是一门基于对象的语言,不是基于面向对象
1.无法创建自定义的类型,无论如何模拟,类型都是Object
2.不能很好支持继承和多态
3.通过new Obecjt();来创建对象。通过 对象.变量名来模拟属性和行为
4.js没有类的概念,可以把创建对象的方式,封装成方法,方法的参数就是构造参数,然后new返回对象
5.对象属性值的调用方式
    对象.属性名
    对象[变量名] or 对象['属性名']

创建对象的方式(4种)
1.直接new Object()
2.封装函数,返回值就是这个新对象
3.封装函数,然后new这个函数
4.JSON字面量的方式


内置对象
    JS的内置对象
    Date:时间对象
    Array:数组对象
    Object:对象
    Math:数学对象
    Regexp:正则表达式对象
    Error:错误对象
    JSON对象
