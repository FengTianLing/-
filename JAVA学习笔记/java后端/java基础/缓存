缓存

###
缓存雪崩
1.原有缓存失效,新的缓存又没及时补上
2.如果大范围缓存设置过期时间相同,在同一时间大面积缓存过期
3.原本访问缓存的请求都去访问数据库,对CPU和内存造成巨大压力
4.严重的话造成数据库宕机,形成一系列连锁反应,造成整个系统崩溃

解决手段
1.采用加锁或者队列方式保证不会有线程对数据库一次性进行读写。
  但这种只是为了减轻数据库压力,没有提高系统吞吐量,假设高并发情况下,
  缓存重建key是锁着的,过来1000个请求,有999个都在阻塞,同样会导致用户超时,治标不治本
2.将缓存过期时间分散,加入随机数。这样每个缓存的失效时间重复率就会降低,就很难引发集体失效事件
3.给每一个缓存增加缓存标记,记录缓存是否失效,如果失效则更新缓存

###
缓存穿透
1.用户查询数据库中没有,自然缓存肯定也没有。
2.每次都在缓存中找不到,在去数据库中找,也没有。相当于请求了2次无用的查询
3.这样请求就绕过了缓存查询数据库,这也是经常提到的缓存命中率问题


解决手段
1.最常见的是采用布隆过滤器,讲所有可能存在的数据哈希到一个足够大的BitMap中,
一个一定不存在的数据会被这个BitMap拦截掉.从而避免了对底层数据库查询压力
2.还有一种比较简单粗暴,如果一个查询返回空(不管存在不存在,或者系统故障),
我也也对这个空结果进行缓存,但他的过去时间会很短,最长不超过五分钟,
这样第二次请求到缓存中获取就有了,不会再继续访问数据,简单粗暴。对要查询的key
进行预先校验,然后在放行给后面的正常缓存处理逻辑


###
缓存预热
就是系统上线后,将相关的缓存数据直接存放在缓存中,避免用户先查询数据库,然后
在把数据放在缓存中的问题。用户直接查询的就是预热的缓存数据

解决手段
1.写个缓存刷新页面,上线时候刷新操作一下
2.数据量不大,项目启动时候自动加载。
3.定时刷新缓存


###
缓存更新
1.缓存系统自带的缓存策略(redis默认的有6中策略选择)
2.根据业务需求进行缓存淘汰,常见的有两种 
    (1)定时清理过期缓存
        缺点：维护大量的缓存的key是比较麻烦的
    (2)当有用户请求过来时候,判断这个请求的缓存是否过期,过期就更新
        缺点：每次用户过来都要进行判断,逻辑比较复杂


###
缓存降级
1.当访问量剧增,服务出现问题或非核心服务影响到核心服务器,仍然要保证服务的可用性
2.及时服是有损服务。系统可用根据一些关键数据进行缓存降级,也可用配置开关实现人工降级
3.降级需要对系统进行梳理,看看系统是不是可用丢卒包帅,看哪些必须保护,哪些可降级。可用参考
日志级别设置预案
    (1)一般:服务偶尔因网络抖动或者服务正在上线儿超时,可用自动降级
    (2)警告:服务在一段时间内成功率有波动,可用自动或者人工降级,并发出警告
    (3)错误:可以率低于90%,数据库连接池被打爆,访问量剧增或者系统承受达到最大阈值。
    (4)严重错误:因特殊原因数据错误了,此时需要紧急人工降级。




