数据库：用来管理和存储数据的。简称DB  database
DBMS：数据库管理软件。

SQL：结构化查询语言
1.DDL：数据定义语言(事务自动提交)
用来创建,修改,删除表的。例如：create创建表,alter修改表,drop删除表等

2.DML：数据操作语言
用来添加,修改,删除表里面数据的。例如 insert插入数据,update修改数据,delete删除数据

3.TCL：事物控制语言
用来提交事务,事务回滚,保存点等。例如 conmit rollback ... 确保数据的一致性

4.DQL：数据查询语言
用来查询表数据的,用的最多。select

5.DCL：数据控制语言(事务自动提交)
用来授权和创建用户等操作。例如 grant授权 revoke回收权限

数据库的数据类型
1.number:数字类型;使用 number(p,s)，其中p表示数字整体个数,s表示小数的位数
2.char:固定长度的字符类型;使用 char(n) n表示占用多少字节数,最大范围是2000
3.varchar2:变长字符类型;使用 varchar2(n) n表示最多会占用多少字节 4000
4.date:日期时间类型;
  timestamp:时间戳.与date不用同的是可以保存到小数秒,最高精度能到纳秒


DDL操作
1.创建表：create table 表名( 字段名  数据类型 [约束] );
2.修改表：rename alter 常用
	(1)改表名:rename 原表名 	To 新表名;
	(2)添加列:alter talbe 表名 add( 字段名 数据类型 [约束] );
	(3)删除列:alter talbe 表名 drop( 字段名 );
	(4)修改列:alter talbe 表名 modify( 字段名 数据类型 [约束] );
3.删除表:	drop talbe 表名;

约束 constraint
1.非空约束:列不允许位空 not null
2.唯一性约束:表示每条记录某字段的值必须唯一 unique,但可以是null
3.主键约束:主键必须包含唯一值,且不允许有null值 primary key
	同时自动定义唯一性约束,一个表只能有一个主键
4.外键约束：一个表的外键指向另一个表的主键 (开发中几乎不定义)
	foreign key references 表名(主键)
	做插入和删除,主键表和外键表两边都要看一下。
	插入外键表,要先看一下又没这个主键;删除主键,要看下别人有没引用我的主键
5.检查约束：约束字段列的值 例如 check(id>0)
6.默认约束：约束默认值 default

列级约束:在声明列的同时加约束
表级约束:创建表时,声明完所有列后,在后面单独加约束


索引：创建索引可以加快查询数据的效率。知道怎么创建和删除就好.不考虑如何使用
复合索引：就是给多个列添加索引
函数索引:经常对函数的结果作为过滤条件,可以创建函数索引。字段被函数处理过
创建:create [unique] index idx_name on 表名(字段名);
删除:drop index 索引名
重构:alter index 索引名 rebuild
1.创建索引指定的列,通常就是where条件里经常出现的列
2.不要再经常做DML操作的表上建立索引
3.不要再小表上建立索引
4.索引并不是越多越好



视图：其本质就是一条查询语句
1.视图本身不包含任何数据。
2.也被称为虚拟表,一组数据的逻辑表示
3.简单视图,复杂视图,连接视图
4.一般情况下不对视图进行DML操作,大部分情况不会成功
	(1)insert:当视图看不到基表的非空约束列,插入就不成功
	(2)delete:可以删除只能查询到的数据
	(3)无法删除复杂视图,连接视图。
	(4)不能违反约束条件
	(5)复杂视图和连接视图,都无法做DML操作
5.
作用
1.语句可以重用
2.限制数据访问,隐藏某些字段限制访问
语法:
create view v_name_xxx  as 语句 (视图约束)
1.or replace:如果视图存在替换,不存在就创建,放在create后面
2.with check option:视图检查约束,写在最后面(插入修改后要能看的见才允许插入修改)
3.with read only:设置视图只读,写在最后。


序列：生成一组【连续不重复】数字的(SEQUENCE)
1.通常情况下用来生成一张表主键值
2.序列可以当作是一张另外的表,独立存在
3.以后开发中,一个序列用一张表
4.创建序列不需要()括号
语法：create sequence seq_name
Start with 100  //序列开始值
increment by 10 //增量,上一个值,每次自增多少
maxvalue n      //序列最大值
nomaxvalue      //没有最大值
minvalue n      //序列最小值
nominvalue      //没有最小值
cycle (默认nocycle)  //是否可循环取序列
cache p (nocache)   //缓存序列
//一次读取序列,数据库会缓存p个值到内存中,下次去会从内存中取
弊端,一旦断电,序列隔断

序列.nextval:获得序列下一值
序列.currval:获得序列当前值

UUID：生成不重复的32位字符串
sys_guid()


	

DML操作
插入:insert into 表名 value(..);
删除:delete from 表名 where 字段=值
修改:update 表名 set 字段名=新值 where 字段名=某值


DQL查询操作
别名:as关键字 可写可不写 写空格即可 例如 emp e  
and 和or 关键字:查询时要同时满足多个条件用and.
like:模糊查询关键字: ..where name like 'a';
in:..where name in('a','b') 查询结果包含条件in里面的值
not in():查询结果只要不包含not in的就行
between..and..:范围区间取值 例如在between 1500 and 3000之间取
is null:如果查询条件null作为 条件,不能使用等号 要使用is
tistinct:过去重复.用在查询显示字段上.不放在条件上
order by:排序,默认升序  order by 字段 desc 降序
1.写在语句的最后面
多列排序,当第一列数据相同时,按第二列排序 

关联查询
1.n表联合查询,至少要有n-1个连接条件
第一中方法
select * from 表1,表2,表3 where 表1.属性=表2.属性 and 表2.属性=表3.属性

select * from 表1 inner join 表2 on 表名1.属性=表名2.属性 inner join 表3 on 表2.属性=表3.属性

自然连接：natural join 自动寻找两张表相同列名做等值连接
1.要保证两张表只有一个字段的名字相同

内连接：等值连接,值返回关联字段相等的结果
外连接：哪边不足，哪边补null。假设右边表作为主表显示全列,左边表不足要补null
全连接：两边都为主表,哪边不足哪边补null
自连接：一个表中自己的主键关联自己的外键

高级查询
1.子查询:某个查询要用到另外一个查询结果作为条件,这个查询叫做子查询
1.单行子查询 2.多行子查询 3.多列子查询
多行子查询:如果子查询返回多行,主查询要用多行比较符操作IN ANY  ALL
2.EXISTS:子查询要想使用父查询的别名,要使用EXISTS关键字
3.单行单列子查询和多行单列子查询，通常用在where字句里面做为条件
4.多行多列子查询通常用在from字句里面,做为基表使用
5.

分页查询
rownum:伪列,给返回数据每行加顺序数字
1.不能做为一次查询的过滤条件

分页语句步骤
1.排序 2编号 3取范围

集合查询：必须字段位置一样才能使用
union/union all :并集 全并集
intersect:交集
minus:差集
语法：
语句1
union [intersect,minus]
语句2


函数
字符串函数
数字函数
日期函数
空值函数
聚合函数:要查询的数据不直接在表中体现,用聚合函数,
聚合函数要配合其他函数使用
group by():分组.都要配合其他函数来使用
having():对分组结果的最后一步条件限制,必须跟在group by()后面不可以单独存在
类似与where操作
TO_DATE(sysdate,'format');时间格式函数
concat(char1,char2)或||  :字符串连接符,类似java中的+
nvl(值1,值2):如果值1的值为null,则取值2.值2是非空值
nvl2(值1,值2,值3):和nvl功能类似

1.DECODE();类似与java的switch-case 用在select字句

2.row_number():根据co1分组,根据col2排序,用在select字句
可以【得到每组的伪列序号】
语法：row_number over(partition by col1 order by col2)

3.rank():根据co1分组,根据col2排序,用在select字句,
可以【得到每组的伪列序号】,若排序列值相同,序号相同,往后【跨度】排名
语法：rank() over(partition by col1 order by col2)

4.dense_rank():根据co1分组,根据col2排序,用在select字句,
可以【得到每组的伪列序号】,若排序列值相同,序号相同,往后【连续】排名
语法：dense_rank() over(partition by col1 order by col2)


高级函数
高级分数函数：分组函数的扩展
group by rollup(a,b,c):全表分组
1.先按abc分一次组,然后在按ab分一次组,在按a分一次组,最后在按整表分一次组
2.最后得到的数据并一起显示
group by cebe(a,b,c):没种组合分一次组,最后得到的数据一起显示
比如：每年每月每天,每年的1号,每年的1月，每月的1号,每年，每月,每天,整体
group by grouping sets((abc),(bc)):灵活分组




mysql
date_format(now(),'%Y-%m-%d');时间格式函数


where与having的区别：
where:用于第一次检索数据的时候过滤
having：1.在结果之上才进行开始二次过滤,
2而且不能独立使用，必须跟在group by字句后面



写select的时候,什么样的书写习惯能改善代码的执行效率
1.from:执行顺序从后往前,从右往左
(数据量较少的表尽量放在后面)
2.where：执行顺序自上而下,从右到左
(将能过滤掉最大记录条件写在where的最右)
3.group by:执行顺序从从左往右分组
(最好在group by前面使用where将不需要的数据,在group by之前过滤掉)
4.having：消耗资源
(尽量避免使用,having会在检索出所有数据之后才对结果集进行过滤,需要排序等操做)
5.select:少用*号,尽量取字段名称
(数据库在解析过程中,通过查询数据将*号依次转换成所有列名,消耗时间）
6.order by：执行顺序从左往右排序,消耗时间。


数据库数据字典:数据库用来维护自己保存的内容
1.user_objects
2.user_view
3.user_update_columns

